{"version":3,"sources":["Assets/heroSec.jpg","Context/ContentContext.js","Components/tempPage.js","Components/tempForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContentContext","createContext","TempPage","context","useContext","id","alt","src","content","heroImage","className","hero","contentHeading","contentText","TempForm","handleSubmit","updateField","e","setContent","target","value","Container","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","URL","createObjectURL","files","Button","color","onClick","to","App","useState","defaultImage","useEffect","localContent","sessionStorage","getItem","JSON","parse","basename","process","Provider","exact","path","preventDefault","setItem","stringify","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e2cde28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heroSec.2cb28e1b.jpg\";","import { createContext } from \"react\";\r\n\r\nexport const ContentContext = createContext();\r\n","import React, { useContext } from \"react\";\r\nimport { ContentContext } from \"../Context/ContentContext\";\r\n\r\nconst TempPage = () => {\r\n  const context = useContext(ContentContext);\r\n\r\n  return (\r\n    <div>\r\n      {/*Hero Section */}\r\n\r\n      <img id=\"image\" alt=\"Hero Section\" src={context.content?.heroImage} />\r\n      <h1 className=\"display-4 hero\">{context.content?.hero}</h1>\r\n\r\n      {/*Content Section */}\r\n\r\n      <div id=\"content\">\r\n        <h1 className=\"display-4\">{context.content?.contentHeading}</h1>\r\n        <p>{context.content?.contentText}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TempPage;\r\n","import React, { useContext } from \"react\";\r\nimport { ContentContext } from \"../Context/ContentContext\";\r\nimport { Container, Label, Form, FormGroup, Input, Button } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//Handle Submit\r\nconst TempForm = ({ handleSubmit }) => {\r\n  const context = useContext(ContentContext);\r\n\r\n  //Get the input field updated to the context\r\n  const updateField = (e) =>\r\n    context.setContent({\r\n      ...context.content,\r\n      [e.target.id]: e.target.value,\r\n    });\r\n\r\n  return (\r\n    <Container>\r\n      <h1 className=\"p-5 text-center display-4\">Edit The Template</h1>\r\n      <Form onSubmit={handleSubmit}>\r\n        {/*** Hero Sec ***/}\r\n\r\n        <FormGroup>\r\n          <Label for=\"hero\">Hero Title</Label>\r\n          <Input\r\n            type=\"text\"\r\n            id=\"hero\"\r\n            value={context.content?.hero}\r\n            onChange={updateField}\r\n          />\r\n        </FormGroup>\r\n\r\n        {/***Hero Image Sec***/}\r\n\r\n        <FormGroup>\r\n          <Label for=\"heroImage\">Hero Image</Label>\r\n          <Input\r\n            type=\"file\"\r\n            id=\"heroImage\"\r\n            onChange={(e) =>\r\n              context.setContent({\r\n                ...context.content,\r\n                [e.target.id]: URL.createObjectURL(e.target.files[0]),\r\n              })\r\n            }\r\n          />\r\n        </FormGroup>\r\n\r\n        {/***Content Heading Sec***/}\r\n\r\n        <FormGroup>\r\n          <Label for=\"contentHeading\">Content Heading</Label>\r\n          <Input\r\n            type=\"text\"\r\n            id=\"contentHeading\"\r\n            value={context.content?.contentHeading}\r\n            onChange={updateField}\r\n          />\r\n        </FormGroup>\r\n\r\n        {/***Content Text***/}\r\n\r\n        <FormGroup>\r\n          <Label for=\"contentText\">Content Text</Label>\r\n          <Input\r\n            type=\"textarea\"\r\n            id=\"contentText\"\r\n            value={context.content?.contentText}\r\n            onChange={updateField}\r\n          />\r\n        </FormGroup>\r\n        <Button color=\"warning\" onClick={handleSubmit}>\r\n          <Link className=\"text-dark\" to=\"/\">\r\n            Submit\r\n          </Link>\r\n        </Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TempForm;\r\n","import React, { useState, useEffect } from \"react\";\nimport { ContentContext } from \"./Context/ContentContext\";\nimport defaultImage from \"./Assets/heroSec.jpg\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { FaPen, FaArrowLeft } from \"react-icons/fa\";\nimport TempPage from \"./Components/tempPage\";\nimport TempForm from \"./Components/tempForm\";\n\nfunction App() {\n  // The default content object\n  const [content, setContent] = useState({\n    hero: \"WEBENEFIC\",\n    heroImage: defaultImage,\n    contentHeading: \"Let's Make Your Online Presence Better\",\n    contentText:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque vulputate auctor porta. Integer venenatis nisi pulvinar tortor finibus dictum. Duis eu metus eget elit tempor tristique et id sem. Proin eleifend tellus in nisl rhoncus semper. Sed ornare, elit vitae elementum blandit, tortor leo vestibulum lacus, mollis accumsan nibh lectus id erat. Aenean sodales, metus ut sodales luctus, ipsum nunc efficitur libero, quis viverra augue magna vitae nisl. Duis hendrerit elementum velit in posuere. Etiam convallis elementum diam eu mattis. Aenean vitae blandit ipsum. Sed mattis convallis turpis vel venenatis. Phasellus ut hendrerit est. Integer ac posuere arcu. Aliquam vel.\",\n  });\n\n  //TODO: Store context to the storage\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    sessionStorage.setItem(\"content\", JSON.stringify(content));\n    console.log(JSON.stringify(content));\n  };\n\n  //TODO: Access context to the page\n  useEffect(() => {\n    const localContent = sessionStorage.getItem(\"content\");\n    if (localContent) {\n      setContent(JSON.parse(localContent));\n    }\n  }, []);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ContentContext.Provider value={{ content, setContent }}>\n        <Switch>\n          {/*Hero Section */}\n\n          <Route exact path=\"/\">\n            <TempPage />\n            <Link id=\"button\" to=\"/edit\">\n              <FaPen />\n            </Link>\n          </Route>\n          {/*Content Section */}\n\n          <Route exact path=\"/edit\">\n            <TempForm handleSubmit={handleSubmit} />\n            <Link id=\"button\" to=\"/\">\n              <FaArrowLeft />\n            </Link>\n          </Route>\n        </Switch>\n      </ContentContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}